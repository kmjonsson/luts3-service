=== SGAS View Engine ===

As of version 3.3, SGAS LUTS features a small, but usefull view engine. However
view had to be manually defined. In version 3.5, two automatic views
"administrators manifest", and "machine view" as added.

The view engine is capable of visualizing information in browsers, using graphs
and tables.

The SGAS view frontpage is found at the URL path /sgas/view, e.g.,:
https://host.example.org:6443/sgas/view. Here there are links to view, which
are defined in sgas.conf. Be careful _NOT_ to add a / at the end of URLs.

To enable the view interface see docs/plugins for more information.

== Automatic view ==

The automatic view are enabled per default.

Access to adminstrators manifest page is guarded by the admin viewgroup, i.e.,
access is granted by "view:viewgroup=admin". The "view:all" will also work
(will grant full access).

Access to machine view is guarded per machine, enabling machine admins to see
usage of their machine, but not other machines. This is done granting the
following permission: "view:machine=host.example.org". Again, the "view:all",
will also work, and will grant access to all machines.


== Custom views ==

Custom views can visualize/report arbitraty data from the database assuming the
data fits into the form needed for graph type. The cost of this flexibility, is
complexity in defining the view, which is done in the configure file.

* Short overview of all configuration options:

Option              Descrpition

viewgroup       Comma-seperated list of groups which can access the view.
type            The type of graph. Valid options:
                lines, columns, stacked_columns, grouped_columns, scatterplot
drawtable       Explicetely render or disable table. Valid values: "true" or "false".
drawgraph       Explicitely render or disable graph. Valid values: "true" or "false".
description     Free form string describing the view.
query           The query send to the database for data retrieval. Note that the data must
                follow the specific format of the view type in order to make sense.


* Explanatory, In-depth View Configuration

[view:insert_total]
viewgroup=vg1,vg2
type=columns
description=Total Inserts, Last 150 days
query=SELECT insert_time, sum(n_jobs) FROM uraggregated \
      WHERE insert_time > current_date - interval '150 days' GROUP BY insert_time ORDER BY insert_time;

Here the view name is "insert_total", and are in the view groups vg1 and vg2
(comma seperated list). The viewgroup is used for authorization, will be
explained later. The view is a standard column chart, with a description, and
query to the database is specified (note that it is possible to have long
entries split across several lines by using \). They query is stock SQL, and is
send to the database as is. This provides great freedom for information
retrieval.

By default SGAS will display both an HTML table with the results and a
visualize the data in graph using javascript. Note that a faily new browser is
needed. For large series of data, the table rendering is disabled, as large
tables are usually rather useless. It is however possible to force rendering of
it, by setting "drawtable=true", or disabling explicitely by setting
"drawtable=false". The same goes for the graph, e.g., "drawgraph=false". By
default the graph is always rendered.


* Graph Data Input

For each graph type, the data returned by the query must adhere to a specific
form.

  # lines
  Data format: X-axis group (discrete), Color group (discrete), Y-Value
  X-axis is typically a date series.
  A line will be rendered for each color group.
  Query example:

    SELECT execution_time, vo_name, SUM(walltime) AS walltime
    FROM uraggregated WHERE execution_time > current_date - 40 
    GROUP BY execution_time, vo_name ORDER BY execution_time, vo_name;

  # columns
  Data format: X-axis group (discrete), Y-value
  X-Axis is typically a date series
  Query example:

    SELECT execution_time, sum(n_jobs) FROM uraggregated \
    WHERE execution_time > current_date - interval '30 days' \
    GROUP BY execution_time ORDER BY execution_time;

  # stacked_columns
  Data format: X-axis group (discrete), Color group (discrete), Y-Value
  X-Axis is typically a date series
  Color group will be the color of the bar for the entry.
  Query example:

    SELECT execution_time, vo_name, sum(walltime) FROM uraggregated \
    WHERE execution_time > (current_date - interval '20 days') \ 
    GROUP BY execution_time, vo ORDER BY execution_time, vo;

  # grouped columns
  Same as stacked_columns, except the bars are grouped instead of stacked.

  # scatterplot
  Data format: Color group (discerete), X-axis value, Y-axis-value, Z-axis value
  Z-axis value is the size of the dot. Can be a constant of only 2-d data is plotted.
  Query example:

    SELECT vo_name, sum(walltime), sum(cputime), sum(n_jobs) \
    FROM uraggregated GROUP BY vo_name, execution_time::DATE;

  Remember that you can use the psql shell to play around with queries before
  using them in views.


* Authorization

Authorization can specified per view or an all-access pass can be granted. To
grant access to a specific view, make an in sgas.authz similar to this:

    "/O=Grid/O=NorduGrid/OU=ndgf.org/CN=Henrik Thostrup Jensen"     view:view=inserts

To specify access rights to a view group:

    "/O=Grid/O=NorduGrid/OU=ndgf.org/CN=Henrik Thostrup Jensen"     view:viewgroup=vg1

It is also possible to specify multiple views/groups by comma seperating the entries:

    "/O=Grid/O=NorduGrid/OU=ndgf.org/CN=Henrik Thostrup Jensen"     view:view:inserts,view:group=vg1

To grant a person access to all views, just specify view, e.g.:

    "/O=Grid/O=NorduGrid/OU=ndgf.org/CN=Josva Kleist"               view:all

Note that SGAS must be restarted in order for any configuration or
authorization changes to take place.

It is possible to save the rendered graphs as svg files by saving the value of
the DOM element vis.scene[0].canvas.innerHTML as an svg file. The easiest way
to this (that I know of), is to right-click on the graph and press "Inspect
Element". This will bring up Firebug with the SVG element selected. Right click
on the SVG element and press "Copy SVG". Hereafter paste the content into a SVG
file (you can then convert it into other formats). It is slightly cumbersome,
but it works. See the following link for more information:
http://groups.google.com/group/protovis/browse_thread/thread/3169031c3b2aae52


* View Examples

[view:executed_total]
type=columns
description=Total Job Walltime Days, Last 50 days
query=SELECT execution_time, (sum(walltime) / 24.0)::integer FROM uraggregated \
      WHERE execution_time > current_date - interval '50 days' GROUP BY execution_time ORDER BY execution_time;


[view:vo_walltime]
type=stacked_columns
description=Aggregated walltime days per VO
query=SELECT execution_time, COALESCE(vo_name, 'N/A'), (sum(walltime) / 24.0)::integer FROM uraggregated \
      WHERE execution_time > (current_date - interval '200 days') GROUP BY execution_time, COALESCE(vo_name, 'N/A');


[view:vo_efficiency]
type=grouped_columns
description=Job efficiency per VO
query=SELECT execution_time AS date, vo_name, round(sum(cputime) / sum(walltime),2) as efficiancy \
      FROM uraggregated \
      WHERE execution_time > (current_date - interval '10 days') AND walltime >= 1 \
      GROUP BY execution_time, vo_name \
      ORDER BY execution_time, vo_name;

[view:project_timejobratio]
viewgroup=projstats
type=scatterplot
description=Walltime/Usertime/Jobcount per project.
query=SELECT vo_name, sum(walltime), sum(cputime), sum(n_jobs) FROM uraggregated GROUP BY vo_name, execution_time::DATE;


[view:storage_usage]
type=lines
description=Storage usage (terabytes).
query=SELECT sample, storage_system, (sum(r) / 1099511627776)::integer FROM ( \
SELECT  \
    DISTINCT ON (t.sample, sg.storage_system, storage_share, storage_media, storage_class, group_identity)  \
    t.sample::date, sg.storage_system, COALESCE(resource_capacity_used, 0) as r \
FROM \
    (SELECT ((current_date+1) - s)::timestamp as sample FROM generate_series(0,11) as s) AS t  \
    CROSS JOIN (SELECT DISTINCT storage_system FROM storagerecords WHERE measure_time > (current_date+1) - interval '12 days') AS sg  \
    LEFT OUTER JOIN storagerecords ON (measure_time <= t.sample AND \
                                       measure_time + valid_duration * interval '1 seconds' >= t.sample AND \
                                       sg.storage_system = storagerecords.storage_system)  \
ORDER BY t.sample, sg.storage_system, storage_share, storage_media, storage_class, group_identity, measure_time DESC ) as s \
GROUP BY s.sample, s.storage_system \
ORDER BY s.sample, s.storage_system;





