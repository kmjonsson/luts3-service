#!/usr/bin/python

"""
A tool for managing hostscalingfactors in the SGAS db.

Author: Erik Edelmann <edelmann@csc.fi>
Copyright NeIC 2016
"""

import argparse
import psycopg2
import datetime
import sys

from sgas.server import config


DEFAULT_POSTGRESQL_PORT = 5432

NOW = datetime.datetime.now()
EPOCH = '1970-01-01 00:00:00'

verbose = False

def connectDb(dbstring):
    args = [ e or None for e in dbstring.split(':') ]
    host, port, database, user, password = args[:5]

    if port is None:
        port = DEFAULT_POSTGRESQL_PORT

    try:
        return psycopg2.connect(host=host, port=port, database=database, user=user, password=password)
    except psycopg2.Error as e:
        sys.stderr.write("DB Error: %s\n" % e)
        sys.exit(1)

def execute_sql(cur, sql):
    if verbose:
        sys.stderr.write("SQL: %s\n" % sql)

    try:
        cur.execute(sql)
    except psycopg2.Error as e:
        sys.stderr.write("DB Error: %s\n" % e)
        sys.exit(1)


def show_factors(db, machine_name, time):
    query = """
        SELECT %s machine_name, scale_factor, from_time
        FROM hostscalefactors
        %s
        ORDER BY machine_name, from_time DESC;
        """

    if machine_name:
        conditions = " WHERE machine_name = '%s'" % machine_name
    else:
        conditions = ""

    if time:
        distinct = "DISTINCT ON (machine_name)"
        if condition:
            conditions += " AND from_time < '%s'" % time
        else:
            conditions = " WHERE from_time < '%s'" % time
    else:
        distinct = ""

    cur = db.cursor()
    execute_sql(cur, query % (distinct, conditions))
    for row in cur.fetchall():
        machine_name = row[0]
        scalefactor = row[1]
        time = row[2]
        print "%-40s  %7s    %s" % (machine_name, scalefactor, time)


def set_factor(db, machine_name, time, factor):

    if not machine_name:
        sys.stderr.write("ERROR: Machine_name must be given for action 'set'!\n")
        sys.exit(1)

    if not factor:
        sys.stderr.write("ERROR: A scale factor must be given for action 'set'!\n")
        sys.exit(1)

    cur = db.cursor()

    if not time:
        # Use NOW by default, unless this is the first scale factor for this
        # machine, in which case we use the Epoch instead.
        execute_sql(cur, "SELECT count(*) FROM hostscalefactors WHERE machine_name = '%s';" % machine_name)
        row = cur.fetchone()
        if row[0] > 0:
            time = NOW.isoformat()
        else:
            time = EPOCH

    sql = "INSERT INTO hostscalefactors (machine_name, from_time, scale_factor) VALUES ('%s', '%s', %s);" \
        % (machine_name, time, factor)
    execute_sql(cur, sql)
    db.commit()


def del_factors(db, machine_name, time):

    if not machine_name:
        sys.stderr.write("ERROR: Machine_name must be given for action 'del'!\n")
        sys.exit(1)

    condition = "WHERE machine_name = '%s'" % machine_name

    if time:
        condition += " AND from_time = '%s'" % time

    print "These host scale factors will be deleted:\n"
    cur = db.cursor()
    execute_sql(cur, "SELECT * FROM hostscalefactors %s;" % condition)
    for row in cur.fetchall():
        machine_name = row[0]
        scalefactor = row[1]
        time = row[2]
        print "%-40s  %7s    %s" % (machine_name, scalefactor, time)
    print "\nProceed (y/n)?"

    response = sys.stdin.readline()
    if response not in ('y\n', 'Y\n'):
        print "Aborting. Nothing deleted"
        sys.exit(0)

    execute_sql(cur, "DELETE FROM hostscalefactors %s;" % condition)
    db.commit()


def main():
    argparser = argparse.ArgumentParser(description='Manage hostscaling factors in SGAS')
    argparser.add_argument('action', choices=['set', 'show', 'del'], help='Action')
    argparser.add_argument('machine_name', nargs='?', help="Machine name")
    argparser.add_argument('factor', nargs='?', help="Scale factor")
    argparser.add_argument('-t', '--time', help="Time in format YYYY-MM-DD[ hh:mm:ss]")
    argparser.add_argument('-c', '--conf', help="SGAS config file (default: /etc/sgas.conf)", default="/etc/sgas.conf")
    argparser.add_argument('-V', '--verbose', help="More output", action='store_true')

    args = argparser.parse_args()

    global verbose
    verbose = args.verbose

    cfg = config.readConfig(args.conf)
    db = connectDb(cfg.get(config.SERVER_BLOCK,config.DB))

    if args.action == 'show':
        show_factors(db, args.machine_name, args.time)
    elif args.action == 'set':
        set_factor(db, args.machine_name, args.time, args.factor)
    elif args.action == 'del':
        del_factors(db, args.machine_name, args.time)
    else:
        raise Exception("Huh?  We should never end up here!")


if __name__ == "__main__":
    main()
